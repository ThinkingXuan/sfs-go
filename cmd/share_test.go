package cmd

import (
	"crypto/ecdsa"
	"crypto/x509"
	"encoding/json"
	"fmt"
	"math/big"
	"sfs-go/internal/encrypt/util"
	"testing"
)

type PublicKey struct {
	PK string `json:"pk"`
}

func TestJson(t *testing.T) {
	s := "{\"fdenc\":\"DrMybCitb10ZquApoZLdSJXQw/ABkD83W4ztRXW9t9Yw5d0xaP3hQI71CLI462pJ\",\"rk\":{},\"xa\":{\"Curve\":{\"P\":115792089210356248762697446949407573530086143415290314195533631308867097853951,\"N\":115792089210356248762697446949407573529996955224135760342422259061068512044369,\"B\":41058363725152142129326129780047268409114441015993725554835256314039467401291,\"Gx\":48439561293906451759052585252797914202762949526041747995844080717082404635286,\"Gy\":36134250956749795798585127919587881956611106672985015071877198253568414405109,\"BitSize\":256,\"Name\":\"P-256\"},\"X\":19661818671558772101710889301370565810908712517496678167353266323315138604447,\"Y\":3449187400815619511619877865159288684929944758889154338479397419267016561125},\"capsule\":{\"E\":{\"Curve\":{\"P\":115792089210356248762697446949407573530086143415290314195533631308867097853951,\"N\":115792089210356248762697446949407573529996955224135760342422259061068512044369,\"B\":41058363725152142129326129780047268409114441015993725554835256314039467401291,\"Gx\":48439561293906451759052585252797914202762949526041747995844080717082404635286,\"Gy\":36134250956749795798585127919587881956611106672985015071877198253568414405109,\"BitSize\":256,\"Name\":\"P-256\"},\"X\":26897316572060527224398122347505293397661483388603776590808270401085282700730,\"Y\":62393519994161688668659551112900033617231900952453586212565980928170099753984},\"V\":{\"Curve\":{\"P\":115792089210356248762697446949407573530086143415290314195533631308867097853951,\"N\":115792089210356248762697446949407573529996955224135760342422259061068512044369,\"B\":41058363725152142129326129780047268409114441015993725554835256314039467401291,\"Gx\":48439561293906451759052585252797914202762949526041747995844080717082404635286,\"Gy\":36134250956749795798585127919587881956611106672985015071877198253568414405109,\"BitSize\":256,\"Name\":\"P-256\"},\"X\":96301382201071223821322377023769433703240159974795456175823871933653309101367,\"Y\":29306990594547320078957509224258043051028642312801640985851822028530820286031},\"S\":49389343510353176262402800614070432421283541755132375978094631711244630951596}}"
	var r ReKey
	err := json.Unmarshal([]byte(s), &r)
	if err != nil {
		fmt.Println(err)
	}
}

func TestPkParse(t *testing.T) {
	s := "fsdfdsfsdfdsfsdret56546546456456"
	var pk = PublicKey{s}
	pkbytes, err := json.Marshal(pk)
	if err != nil {
		fmt.Println(err)
	}

	var pk2 PublicKey

	err = json.Unmarshal(pkbytes, &pk2)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(pk2.PK)
}

func TestX509(t *testing.T) {
	myPubKey, err := util.GetPubKey("D:\\workspace\\go_workspace\\src\\sfs-go\\config")
	if err != nil {
		fmt.Println("err1:", err)

	}
	
	fmt.Println(myPubKey)

	bytes, err := x509.MarshalPKIXPublicKey(myPubKey)
	if err != nil {
		fmt.Println("err2:", err)

	}

	pub, err := x509.ParsePKIXPublicKey(bytes)
	if err != nil {
		fmt.Println("err3:", err)
	}

	fmt.Println(myPubKey)
	fmt.Println(pub.(*ecdsa.PublicKey))

	//fmt.Println(*myPubKey == *pub.(*ecdsa.PublicKey))

}

func TestBIGInt(t *testing.T) {

	var big1 big.Int

	big2 := big.NewInt(-123234324)
	fmt.Println(big2.Sign())
	bytes := big2.Bytes()

	big3 := big1.SetBytes(bytes)
	fmt.Println(big1)
	fmt.Println(big3.Sign())
	fmt.Println(big3)
}
